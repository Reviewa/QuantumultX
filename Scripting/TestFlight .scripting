// @ts-nocheck

import { fetch, Notification, Widget, Script, Navigation, NavigationStack, Text, VStack, Spacer, Link, Slider, Button, Toggle, useState, useEffect } from "scripting"

// ---------------- 配置 ----------------
const MIN_INTERVAL = 5
const MAX_DISPLAY = 5
const STORAGE_KEY = "_departures_lastTitle"
const INTERVAL_KEY = "_departures_interval"
const ENABLE_KEY = "_departures_enable"

// ---------------- 本地存储 ----------------
function getStorage(key, defaultValue) {
  try { return globalThis._departuresStore?.[key] ?? defaultValue } catch { return defaultValue }
}
function setStorage(key, value) {
  globalThis._departuresStore = globalThis._departuresStore || {}
  globalThis._departuresStore[key] = value
}

// ---------------- 获取最新条目 ----------------
async function fetchDepartures() {
  try {
    const html = await fetch("https://departures.to/latest").then(r => r.text())
    const regex = /<h2[^>]*>.*?<a href="(.*?)".*?>(.*?)<\/a>.*?<\/h2>/g
    const items = []
    let match
    while ((match = regex.exec(html)) !== null) {
      const link = match[1].trim()
      const title = match[2].replace(/<[^>]+>/g, "").trim()
      if (title && link) items.push({ title, link })
    }
    return items
  } catch (e) {
    console.error("获取 departures.to 数据失败:", e)
    return []
  }
}

// ---------------- 发送通知 ----------------
async function notifyNew(item) {
  const lastTitle = getStorage(STORAGE_KEY, "")
  if (item.title !== lastTitle) {
    await Notification.schedule({ title: "Departures 新条目", body: item.title })
    setStorage(STORAGE_KEY, item.title)
  }
}

// ---------------- 主界面 ----------------
function View() {
  const dismiss = Navigation.useDismiss()
  const [interval, setInterval] = useState(getStorage(INTERVAL_KEY, 60))
  const [enabled, setEnabled] = useState(getStorage(ENABLE_KEY, true))
  const [items, setItems] = useState([])

  async function refresh() {
    const data = await fetchDepartures()
    setItems(data)
    if (enabled && data.length > 0) await notifyNew(data[0])
  }

  useEffect(() => { refresh() }, [])

  const stack = new VStack()
  stack.spacing = 10
  stack.padding = 16
  stack.alignment = "leading"

  const titleText = new Text("📦 Departures 更新监控")
  titleText.font = "headline"
  stack.add(titleText)

  const toggle = new Toggle()
  toggle.title = "开启监控"
  toggle.value = enabled
  toggle.onChanged = v => { setEnabled(v); setStorage(ENABLE_KEY, v) }
  stack.add(toggle)

  const infoText = new Text("点击条目跳转网页")
  infoText.font = "footnote"
  stack.add(infoText)

  const displayCount = Math.min(items.length, MAX_DISPLAY)
  for (let i = 0; i < displayCount; i++) {
    const item = items[i]
    const link = new Link(item.link)
    const t = new Text("• " + item.title)
    t.font = "footnote"
    t.lineLimit = 1
    link.add(t)
    stack.add(link)
  }

  stack.add(new Spacer())

  const intervalText = new Text("刷新间隔: " + interval + " 分钟")
  intervalText.font = "caption2"
  stack.add(intervalText)

  const slider = new Slider()
  slider.min = MIN_INTERVAL
  slider.max = 120
  slider.step = 5
  slider.value = interval
  slider.onChanged = v => { setInterval(v); setStorage(INTERVAL_KEY, v) }
  stack.add(slider)

  const refreshBtn = new Button()
  refreshBtn.title = "立即刷新"
  refreshBtn.onTap = refresh
  stack.add(refreshBtn)

  return stack
}

// ---------------- Widget ----------------
async function mainWidget() {
  const items = await fetchDepartures()

  const stack = new VStack()
  stack.spacing = 8
  stack.padding = 16
  stack.alignment = "leading"

  const title = new Text("📦 Departures 更新")
  title.font = "headline"
  stack.add(title)

  const displayCount = Math.min(items.length, MAX_DISPLAY)
  for (let i = 0; i < displayCount; i++) {
    const item = items[i]
    const t = new Text("• " + item.title)
    t.font = "footnote"
    t.lineLimit = 1
    stack.add(t)
  }

  stack.add(new Spacer())
  const updateTime = new Text("更新时间: " + new Date().toLocaleTimeString())
  updateTime.font = "caption2"
  stack.add(updateTime)

  return stack
}

// ---------------- 运行 ----------------
async function run() {
  // 如果在小组件环境则显示 Widget
  if (globalThis.runsInWidget) {
    const el = await mainWidget()
    Widget.present(el)
  } else {
    // 否则显示可交互脚本界面
    const el = View()
    await Navigation.present({ element: el })
  }
  Script.exit()
}

run()
